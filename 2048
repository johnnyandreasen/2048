import numpy as np
import arcade
import random
import PIL

# Set how many rows and columns we will have
ROW_COUNT = 4
COLUMN_COUNT = 4

# This sets the WIDTH and HEIGHT of each grid location
WIDTH = 150
HEIGHT = 150

# This sets the margin between each cell
# and on the edges of the screen.
MARGIN = 5

# Do the math to figure out our screen dimensions
SCREEN_WIDTH = (WIDTH + MARGIN) * COLUMN_COUNT + MARGIN
SCREEN_HEIGHT = (HEIGHT + MARGIN) * ROW_COUNT + MARGIN
SCREEN_TITLE = "2048"


class MyGame(arcade.Window):
    """
    Main application class.
    """

    def __init__(self, width, height, title):
        """
        Set up the application.
        """

        super().__init__(width, height, title)

        # Create a 2 dimensional array. A two-dimensional
        # array is simply a list of lists.
        self.grid = []
        for row in range(ROW_COUNT):
            # Add an empty array that will hold each cell
            # in this row
            self.grid.append([])
            for column in range(COLUMN_COUNT):
                self.grid[row].append(0)  # Append a cell

        arcade.set_background_color(arcade.color.BLACK)

        self.generate_tiles()

    def on_draw(self):
        """
        Render the screen.
        """

        # This command has to happen before we start drawing
        self.clear()

        # Draw the grid
        for row in range(ROW_COUNT):
            for column in range(COLUMN_COUNT):
                # Figure out what color to draw the box
                if self.grid[row][column] == 1:
                    color = arcade.color.LIGHT_GRAY
                else:
                    color = arcade.color.WHITE

                # Do the math to figure out where the box is
                x = (MARGIN + WIDTH) * column + MARGIN + WIDTH // 2
                y = (MARGIN + HEIGHT) * row + MARGIN + HEIGHT // 2

                # Draw the box
                arcade.draw_rectangle_filled(x, y, WIDTH, HEIGHT, color)

    def generate_tiles(self):
        empty_cells = [(r, c) for r in range(ROW_COUNT) for c in range(COLUMN_COUNT) if self.grid[r][c] == 0]
        random.shuffle(empty_cells)
    
        num_tiles = min(len(empty_cells), random.randint(1, 2)) 
    
        for _ in range(num_tiles):
            if not empty_cells:
                break
            row, col = empty_cells.pop()
        self.grid[row][col] = 1

    def on_key_press(self, key, modifiers):
        """Called whenever a key is pressed."""
         if key == arcade.key.UP:
            self.generate_tiles()

        if key == arcade.key.DOWN:
            self.generate_tiles()
        
        if key == arcade.key.LEFT:
            self.generate_tiles()
            
        if key == arcade.key.RIGHT:
            self.generate_tiles()

       


    

def main():

    MyGame(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
    arcade.run()


if __name__ == "__main__":
    main()
