import arcade
import random
import numpy as np
import PIL



WIDTH = 200
HEIGHT = 200

MARGIN = 1

COLUMN_COUNT = 4
ROW_COUNT = 4
TILE_SIZE = 80


SCREEN_WIDTH = (WIDTH + MARGIN) * COLUMN_COUNT + MARGIN
SCREEN_HEIGHT = (HEIGHT + MARGIN) * ROW_COUNT + MARGIN
SCREEN_TITLE = "2048"


    
def new_board():
    board = [[0 for _x in range(COLUMN_COUNT)] for _y in range(ROW_COUNT)]
    board += [[1 for _x in range(COLUMN_COUNT)]]
    board = np.asarray(board)
    return board



class Game_2048(arcade.Window):
    
    def __init__(self, width, height):

        self.board = None
        self.frame_count = 0
        self.game_over = False
        self.paused = False
        self.board_sprite_list = None

        self.stone = None
 
        
    def spawn_tile(self):
        empty_cells = [(i, j) for i in range(4) for j in range(4) if board[i][j] == 0]
        if empty_cells:
            i, j = random.choice(empty_cells)
            self.board[i][j] = 2 if random.random() < 0.9 else 4



    def move_up(board):
        transposed_board = transpose_board(board)
        new_board = move_left(transposed_board)
        return transpose_board(new_board)

    def move_down(board):
        transposed_board = transpose_board(board)
        new_board = move_right(transposed_board)
        return transpose_board(new_board)

    def is_game_over(board):
        for row in board:
            if 0 in row:
                return False
            for i in range(3):
                if row[i] == row[i + 1]:
                    return False


    def on_draw(self):
        pass
    
    def move_right(board):
        reversed_board = [row[::-1] for row in board]
        new_board = []
        for row in reversed_board:
            new_row = merge_tiles(row)
            new_board.append(new_row[::-1])
        return new_board

    
    def move_tiles(self, direction):
        pass
    
    def merge_tiles(self, direction):
         new_row = [0] * 4
        index = 0
        for tile in row:
            if tile != 0:
                if new_row[index] == 0:
                    new_row[index] = tile
                elif new_row[index] == tile:
                    new_row[index] *= 2
                    index += 1
                else:
                    index += 1
                    new_row[index] = tile

        return new_row

    
    def can_move(self, direction):
        pass
    
def main():
    game = Game_2048(SCREEN_WIDTH, SCREEN_HEIGHT)
    arcade.run()
    
if __name__ == "__main__":
    main()
