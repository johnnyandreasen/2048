import arcade
import random
import numpy as np
import PIL


ROW_COUNT = 4
COLUMN_COUNT = 4

WIDTH = 150
HEIGHT = 150

MARGIN = 5



SCREEN_WIDTH = (WIDTH + MARGIN) * COLUMN_COUNT + MARGIN
SCREEN_HEIGHT = (HEIGHT + MARGIN) * ROW_COUNT + MARGIN
SCREEN_TITLE = "2048"


    
def new_board():
    board = [[0 for _x in range(COLUMN_COUNT)] for _y in range(ROW_COUNT)]
    board += [[1 for _x in range(COLUMN_COUNT)]]
    board = np.asarray(board)
    return board



class MyGame(arcade.Window):
    """
    Main application class.
    """

    def __init__(self, width, height, title):
        self.board = None
        self.frame_count = 0
        self.game_over = False
        self.paused = False
        self.board_sprite_list = None

        super().__init__(width, height, title)

        # Create a 2 dimensional array. A two-dimensional
        # array is simply a list of lists.
        self.grid = []
        for row in range(ROW_COUNT):
            # Add an empty array that will hold each cell
            # in this row
            self.grid.append([])
            for column in range(COLUMN_COUNT):
                self.grid[row].append(0)  # Append a cell

        arcade.set_background_color(arcade.color.BLACK)

    def on_draw(self):
        """
        Render the screen.
        """

        # This command has to happen before we start drawing
        self.clear()

        # Draw the grid
        for row in range(ROW_COUNT):
            for column in range(COLUMN_COUNT):
                # Figure out what color to draw the box
                if self.grid[row][column] == 2:
                    color = arcade.color.GRAY
                else:
                    color = arcade.color.WHITE

                # Do the math to figure out where the box is
                x = (MARGIN + WIDTH) * column + MARGIN + WIDTH // 2
                y = (MARGIN + HEIGHT) * row + MARGIN + HEIGHT // 2

                # Draw the box
                arcade.draw_rectangle_filled(x, y, WIDTH, HEIGHT, color)

    def on_mouse_press(self, x, y, button, modifiers):
        """
        Called when the user presses a mouse button.
        """

        # Change the x/y screen coordinates to grid coordinates
        column = int(x // (WIDTH + MARGIN))
        row = int(y // (HEIGHT + MARGIN))

        print(f"Click coordinates: ({x}, {y}). Grid coordinates: ({row}, {column})")

        # Make sure we are on-grid. It is possible to click in the upper right
        # corner in the margin and go to a grid location that doesn't exist
        if row < ROW_COUNT and column < COLUMN_COUNT:

            # Flip the location between 1 and 0.
            if self.grid[row][column] == 0:
                self.grid[row][column] = 1
            else:
                self.grid[row][column] = 0

    def spawn_tile(self):
        empty_cells = [(i, j) for i in range(4) for j in range(4) if board[i][j] == 0]
        if empty_cells:
            i, j = random.choice(empty_cells)
            self.board[i][j] = 2 if random.random() < 0.9 else 4


def main():

    MyGame(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
    arcade.run()


if __name__ == "__main__":
    main()



CLASS_2048
 





    def is_game_over(board):
        for row in board:
            if 0 in row:
                return False
            for i in range(3):
                if row[i] == row[i + 1]:
                    return False


    
    def move_right(board):
        reversed_board = [row[::-1] for row in board]
        new_board = []
        for row in reversed_board:
            new_row = merge_tiles(row)
            new_board.append(new_row[::-1])
        return new_board

    def move_up(board):
        transposed_board = transpose_board(board)
        new_board = move_left(transposed_board)
        return transpose_board(new_board)

    def move_down(board):
        transposed_board = transpose_board(board)
        new_board = move_right(transposed_board)
        return transpose_board(new_board)


    
    def merge_tiles(self, direction):
         new_row = [0] * 4
        index = 0
        for tile in row:
            if tile != 0:
                if new_row[index] == 0:
                    new_row[index] = tile
                elif new_row[index] == tile:
                    new_row[index] *= 2
                    index += 1
                else:
                    index += 1
                    new_row[index] = tile

        return new_row

    
def main():
    game = Game_2048(SCREEN_WIDTH, SCREEN_HEIGHT)
    arcade.run()
    
if __name__ == "__main__":
    main()
