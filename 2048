import numpy as np
import arcade
import random
import PIL

ROW_COUNT = 4
COLUMN_COUNT = 4

WIDTH = 150
HEIGHT = 150

MARGIN = 5

SCREEN_WIDTH = (WIDTH + MARGIN) * COLUMN_COUNT + MARGIN
SCREEN_HEIGHT = (HEIGHT + MARGIN) * ROW_COUNT + MARGIN
SCREEN_TITLE = "2048"

class MyGame(arcade.Window):

    darker_orange = (242, 139, 18, 0.8)
    red = (230, 26, 26, 0.8)
    darker_red = (230, 26, 26, 1)
    yellow = (255, 255, 25, 1)
   
    def __init__(self, width, height, title):
       
        super().__init__(width, height, title)

        self.grid = []
        for row in range(ROW_COUNT):
            
            self.grid.append([])
            for column in range(COLUMN_COUNT):
                self.grid[row].append(0)

        arcade.set_background_color(arcade.color.BLACK)

        self.generate_tiles()
        

    def on_draw(self):
        
        self.clear()

        for row in range(ROW_COUNT):
            for column in range(COLUMN_COUNT):
                # Figure out what color to draw the box
                if self.grid[row][column] == 4:
                    color = light_orange
                if self.grid[row][column] ==8:
                    color = darker orange 
                if self.grid[row][column] == 16:
                    color = red
                if self.grid[row][column] == 32:
                    color = darker_red
                if self.grid[row][column] == 64:
                    color = yellow
                if self.grid[row][column] == 128:
                    color = arcade.color.Orange
                if self.grid[row][column] == 256:
                    color = arcade.color.Purple
                if self.grid[row][column] == 512:
                    color = arcade.color.Blue
                if self.grid[row][column] == 1024
                    color = arcade.color.Green
                if self.grid[row][column] == 2048:
                    color = arcade.color.Black
                
                if self.grid[row][column] == 1:
                    color = arcade.color.LIGHT_GRAY
                elif self.grid[row][column] == 2:
                    color = arcade.color.GRAY
                else:
                    color = arcade.color.WHITE

                x = (MARGIN + WIDTH) * column + MARGIN + WIDTH // 2
                y = (MARGIN + HEIGHT) * row + MARGIN + HEIGHT // 2

                arcade.draw_rectangle_filled(x, y, WIDTH, HEIGHT, color)
                

    def generate_tiles(self):
        empty_cells = [(r, c) for r in range(ROW_COUNT) for c in range(COLUMN_COUNT) if self.grid[r][c] == 0]
        random.shuffle(empty_cells)
    
        if len(empty_cells) == 0:
            self.game_over
    
        num_tiles = min(len(empty_cells), random.randint(1, 2)) 
    
        for _ in range(num_tiles):
            if not empty_cells:
                break
            row, col = empty_cells.pop()
        self.grid[row][col] = 1
        
        
    def collision_row(self):
        x = 0
        for row in range(ROW_COUNT):
            for column in range(COLUMN_COUNT):
                if self.grid[row] == 1:
                    x += 1
        if x >= 2:
            self.grid[row][column] = 2
        
        
    def collision_column(self):
        x = 0 
        for column in range(COLUMN_COUNT):
            for row in range(ROW_COUNT):
                if self.grid[row] == 1:
                    x += 1
        if x >= 2: 
            self.grid[row][column] = 2
        

    def on_key_press(self, key, modifiers):
                
        if key == arcade.key.UP:
            for row in range(ROW_COUNT):
                for column in range(COLUMN_COUNT):
                    if self.grid[row][column] == 1:
                        self.grid[row][column] = 0
                        self.grid[3][column] = 1
            
            self.generate_tiles()

        if key == arcade.key.DOWN:
            for row in range(ROW_COUNT):
                for column in range(COLUMN_COUNT):
                    if self.grid[row][column] == 1:
                            self.grid[row][column] = 0
                            self.grid[0][column] = 1
                        
            self.generate_tiles()
        
        if key == arcade.key.LEFT:
            for row in range(ROW_COUNT):
                for column in range(COLUMN_COUNT):
                    if self.grid[row][column] == 1:
                        self.grid[row][column] = 0
                        self.grid[row][0] = 1
                        
            self.generate_tiles()
            
        if key == arcade.key.RIGHT:
            for row in range(ROW_COUNT):
                for column in range(COLUMN_COUNT):
                    if self.grid[row][column] == 1:
                        self.grid[row][column] = 0
                        self.grid[row][3] = 1
                        
            self.generate_tiles()
            

def main():

    MyGame(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
    arcade.run()

if __name__ == "__main__":
    main()
